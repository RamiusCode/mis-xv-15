<!-- REPRODUCTOR DE M√öSICA - VERSI√ìN CSS PURO -->
<div
  class="w-full max-w-[350px] sm:max-w-sm mx-auto mt-12 sm:mt-16 px-4 animate-on-scroll"
  id="music-player-container"
>
  <div
    class="bg-white/20 backdrop-blur-xl border border-white/30 rounded-3xl p-6 sm:p-8 shadow-lg relative overflow-hidden"
    id="player-card"
  >
    <!-- Efectos de fondo (igual) -->
    <div class="absolute inset-0 bg-gradient-to-br from-[#95303a]/10 via-transparent to-[#95303a]/5 pointer-events-none"></div>
    <div class="absolute -top-20 -right-20 w-40 h-40 bg-[#95303a]/10 rounded-full blur-3xl pointer-events-none"></div>
    <div class="absolute -bottom-20 -left-20 w-32 h-32 bg-[#95303a]/8 rounded-full blur-3xl pointer-events-none"></div>

    <div class="relative z-10">
      <!-- T√≠tulo -->
      <div class="text-center mb-3" id="player-title">
        <div class="text-center z-30 mb-2 w-full">
          <div class="flex items-center justify-center gap-3 sm:gap-4 md:gap-6 lg:gap-8">
            <div id="mariposa-izq" class="flex-shrink-0">
              <img src="/gif/MariposaRoja.gif" alt="Mariposa izquierda" class="w-8 h-auto sm:w-8 sm:h-8 md:w-10 md:h-10 lg:w-12 lg:h-12 object-contain" />
            </div>
            <div id="titulo" class="flex-shrink min-w-0">
              <h3 class="font-great-vibes text-xl sm:text-2xl md:text-3xl text-[#95303a] mb-2">
                Mi Canci√≥n Especial
              </h3>
            </div>
            <div id="mariposa-der" class="flex-shrink-0">
              <img src="/gif/MariposaRoja.gif" alt="Mariposa derecha" class="w-8 h-auto sm:w-8 sm:h-8 md:w-10 md:h-10 lg:w-12 lg:h-12 object-contain scale-x-[-1]" />
            </div>
          </div>
        </div>
        <p id="romantic-text" class="text-xs sm:text-sm italic text-[#95303a]/70 font-medium w-full text-center px-2">
          ‚ú® Una melod√≠a para recordar siempre ‚ú®
        </p>
      </div>

      <!-- Controles -->
      <div class="flex items-center justify-center space-x-6 sm:space-x-10" id="controls-container">
        <button id="prevBtn" class="text-[#95303a]/60 hover:text-[#95303a] transition-all duration-300 text-xl sm:text-2xl p-3 rounded-full hover:bg-white/20 transform hover:scale-110 focus:outline-none">
          <svg width="24" height="24" viewBox="0 0 24 24" fill="currentColor">
            <path d="M7 6v12l-2-2V8l2-2zm2 6l8-5v10l-8-5z"></path>
          </svg>
        </button>

        <button id="playPauseBtn" class="relative text-[#95303a] text-4xl sm:text-5xl transition-all duration-300 transform hover:scale-110 focus:outline-none group">
          <div class="absolute inset-0 bg-gradient-to-br from-[#95303a]/20 to-[#95303a]/10 rounded-full blur-lg scale-150 opacity-0 group-hover:opacity-100 transition-opacity duration-300"></div>
          <div class="relative z-10 transform transition-all duration-300">
            <svg width="48" height="48" viewBox="0 0 24 24" fill="currentColor" class="drop-shadow-lg">
              <path d="M12 21.35l-1.45-1.32C5.4 15.36 2 12.28 2 8.5 2 5.42 4.42 3 7.5 3c1.74 0 3.41.81 4.5 2.09C13.09 3.81 14.76 3 16.5 3 19.58 3 22 5.42 22 8.5c0 3.78-3.4 6.86-8.55 11.54L12 21.35z"></path>
            </svg>
            <div class="absolute inset-0 flex items-center justify-center">
              <svg id="play-icon" width="16" height="16" viewBox="0 0 24 24" fill="white" class="drop-shadow-sm">
                <path d="M8 5v14l11-7z"></path>
              </svg>
              <svg id="pause-icon" width="16" height="16" viewBox="0 0 24 24" fill="white" class="hidden drop-shadow-sm">
                <path d="M6 4h4v16H6V4zm8 0h4v16h-4V4z"></path>
              </svg>
            </div>
          </div>
          <div class="absolute inset-0 pointer-events-none" id="heart-particles"></div>
        </button>

        <button id="nextBtn" class="text-[#95303a]/60 hover:text-[#95303a] transition-all duration-300 text-xl sm:text-2xl p-3 rounded-full hover:bg-white/20 transform hover:scale-110 focus:outline-none">
          <svg width="24" height="24" viewBox="0 0 24 24" fill="currentColor">
            <path d="M17 18V6l2 2v8l-2 2zm-2-6L7 7v10l8-5z"></path>
          </svg>
        </button>
      </div>

      <!-- Barra de progreso -->
      <div class="px-2 sm:px-4" id="progress-container">
        <div class="flex items-center justify-between text-xs sm:text-sm text-[#95303a]/60 mb-3 font-medium">
          <span id="currentTime">0:00</span>
          <span class="text-[#95303a]/40">‚ô™</span>
          <span id="totalDuration">--:--</span>
        </div>
        <div class="relative">
          <input type="range" id="progressBar" value="0" max="100" class="w-full h-2 bg-gradient-to-r from-[#95303a]/20 to-[#95303a]/10 rounded-full appearance-none cursor-pointer slider-elegant" />
        </div>
      </div>
    </div>
  </div>
</div>

<audio id="music-audio" preload="auto">
  <source src="/audio/loscapos.mp3" type="audio/mpeg" />
</audio>

<style>
/* ============================================
   üé® ANIMACIONES CSS - Reemplazan GSAP
   ============================================ */

/* üì¶ Estado inicial - OCULTO */
#music-player-container {
  opacity: 0;
  transform: translateY(50px) scale(0.9);
}

#music-player-container #player-title {
  opacity: 0;
  transform: translateY(30px);
}

#music-player-container #controls-container {
  opacity: 0;
  transform: scale(0.8);
}

#music-player-container #progress-container {
  opacity: 0;
  transform: translateY(20px);
}

#music-player-container #romantic-text {
  opacity: 0;
}

/* ‚ú® ANIMACIONES cuando es VISIBLE */
#music-player-container.visible {
  animation: fadeInUp 0.8s cubic-bezier(0.4, 0, 0.2, 1) forwards;
}

#music-player-container.visible #player-title {
  animation: fadeInUp 0.5s ease-out 0.2s forwards;
}

#music-player-container.visible #controls-container {
  animation: scaleIn 0.6s cubic-bezier(0.68, -0.55, 0.265, 1.55) 0.4s forwards;
}

#music-player-container.visible #progress-container {
  animation: fadeInUp 0.5s ease-out 0.6s forwards;
}

#music-player-container.visible #romantic-text {
  animation: fadeIn 0.4s ease-out 0.8s forwards;
}

/* üé¨ KEYFRAMES */
@keyframes fadeInUp {
  from {
    opacity: 0;
    transform: translateY(50px) scale(0.9);
  }
  to {
    opacity: 1;
    transform: translateY(0) scale(1);
  }
}

@keyframes scaleIn {
  from {
    opacity: 0;
    transform: scale(0.8);
  }
  to {
    opacity: 1;
    transform: scale(1);
  }
}

@keyframes fadeIn {
  from { opacity: 0; }
  to { opacity: 0.8; }
}

/* ‚ù§Ô∏è CORAZ√ìN LATIENDO */
@keyframes heartbeat {
  0%, 100% { transform: scale(1); }
  25% { transform: scale(1.1); }
  50% { transform: scale(1.05); }
  75% { transform: scale(1.15); }
}

#playPauseBtn:hover {
  animation: heartbeat 1.5s ease-in-out infinite;
}

/* üé® Estilos del card */
#player-card {
  backdrop-filter: blur(25px);
  background: linear-gradient(135deg, rgba(255, 255, 255, 0.25), rgba(255, 255, 255, 0.1));
  border: 1px solid rgba(255, 255, 255, 0.4);
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.08), inset 0 1px 0 rgba(255, 255, 255, 0.5);
}

/* üéöÔ∏è Slider */
.slider-elegant {
  background: linear-gradient(to right, rgba(149, 48, 58, 0.3), rgba(149, 48, 58, 0.1));
  outline: none;
  border-radius: 15px;
}

.slider-elegant::-webkit-slider-thumb {
  appearance: none;
  width: 20px;
  height: 20px;
  border-radius: 50%;
  background: linear-gradient(135deg, #95303a, #b83f52);
  cursor: pointer;
  box-shadow: 0 2px 8px rgba(149, 48, 58, 0.3);
  border: 3px solid rgba(255, 255, 255, 0.8);
  transition: all 0.3s ease;
}

.slider-elegant::-webkit-slider-thumb:hover {
  transform: scale(1.2);
  box-shadow: 0 4px 12px rgba(149, 48, 58, 0.5);
}

.slider-elegant::-moz-range-thumb {
  width: 20px;
  height: 20px;
  border-radius: 50%;
  background: linear-gradient(135deg, #95303a, #b83f52);
  cursor: pointer;
  border: 3px solid rgba(255, 255, 255, 0.8);
  box-shadow: 0 2px 8px rgba(149, 48, 58, 0.3);
}

button:not(#playPauseBtn):hover {
  transform: translateY(-2px) scale(1.05);
}

#player-card::before {
  content: "";
  position: absolute;
  top: -2px;
  left: -2px;
  right: -2px;
  bottom: -2px;
  background: linear-gradient(45deg, rgba(149, 48, 58, 0.1), transparent, rgba(149, 48, 58, 0.1));
  border-radius: inherit;
  z-index: -1;
  opacity: 0;
  transition: opacity 0.3s ease;
}

#player-card:hover::before {
  opacity: 1;
}

@media (max-width: 640px) {
  #player-card {
    margin: 1rem;
    padding: 1.5rem;
  }
}

/* üíñ ANIMACI√ìN PART√çCULAS CORAZ√ìN */
@keyframes heartParticle {
  0% {
    opacity: 0;
    transform: translate(-50%, -50%) scale(0.5);
  }
  50% {
    opacity: 1;
    transform: translate(var(--x), var(--y)) scale(1.5) rotate(var(--rotation));
  }
  100% {
    opacity: 0;
    transform: translate(var(--x), var(--y)) scale(0.5) rotate(var(--rotation));
  }
}

.heart-particle {
  position: absolute;
  font-size: 12px;
  pointer-events: none;
  left: 50%;
  top: 50%;
  animation: heartParticle 0.8s ease-out forwards;
}
</style>

<script>
/* ============================================
   üéµ JAVASCRIPT - Solo funcionalidad del audio
   ============================================ */

let isPlaying = false;
let currentTime = 0;
let duration = 0;

document.addEventListener("DOMContentLoaded", () => {
  console.log("üéµ Iniciando reproductor CSS...");

  // ‚ö° INTERSECTION OBSERVER - Reemplaza ScrollTrigger
  const observer = new IntersectionObserver((entries) => {
    entries.forEach(entry => {
      if (entry.isIntersecting) {
        entry.target.classList.add('visible');
      } else {
        // Solo ocultar en desktop al salir por arriba
        if (window.innerWidth > 768 && entry.boundingClientRect.top > 0) {
          entry.target.classList.remove('visible');
        }
      }
    });
  }, { 
    threshold: 0.1,
    rootMargin: '0px 0px -10% 0px'
  });

  const player = document.querySelector('#music-player-container');
  if (player) observer.observe(player);

  // üéµ CONTROLES DE AUDIO
  const playPauseBtn = document.getElementById("playPauseBtn");
  const prevBtn = document.getElementById("prevBtn");
  const nextBtn = document.getElementById("nextBtn");
  const progressBar = document.getElementById("progressBar");
  const audioElement = document.getElementById("music-audio");

  if (playPauseBtn) playPauseBtn.addEventListener("click", togglePlayPause);
  if (prevBtn) prevBtn.addEventListener("click", () => animateButton(prevBtn));
  if (nextBtn) nextBtn.addEventListener("click", () => animateButton(nextBtn));
  if (progressBar) progressBar.addEventListener("input", seekAudio);

  // Duraci√≥n del audio
  if (audioElement instanceof HTMLAudioElement) {
    audioElement.addEventListener("loadedmetadata", () => {
      duration = audioElement.duration;
      updateTimeDisplay();
    });
  }

  // ‚ñ∂Ô∏è PLAY/PAUSE
  function togglePlayPause() {
    if (!(audioElement instanceof HTMLAudioElement)) return;

    const playIcon = document.getElementById("play-icon");
    const pauseIcon = document.getElementById("pause-icon");
    const heartBtn = document.getElementById("playPauseBtn");

    if (!isPlaying) {
      audioElement.play().catch(err => console.log("Error:", err));
      if (playIcon) playIcon.classList.add("hidden");
      if (pauseIcon) pauseIcon.classList.remove("hidden");
      
      // Animaci√≥n coraz√≥n CSS
      heartBtn?.classList.add('scale-110');
      setTimeout(() => heartBtn?.classList.remove('scale-110'), 200);
      
      createHeartParticles();
      isPlaying = true;
      startProgress();
    } else {
      audioElement.pause();
      if (playIcon) playIcon.classList.remove("hidden");
      if (pauseIcon) pauseIcon.classList.add("hidden");
      isPlaying = false;
    }
  }

  // üíñ PART√çCULAS CORAZ√ìN - Versi√≥n CSS
  function createHeartParticles() {
    const container = document.getElementById("heart-particles");
    if (!container) return;

    for (let i = 0; i < 6; i++) {
      const particle = document.createElement("div");
      particle.innerHTML = "üíñ";
      particle.className = "heart-particle";
      
      // Variables CSS para posici√≥n y rotaci√≥n aleatorias
      const x = (Math.random() - 0.5) * 100;
      const y = (Math.random() - 0.5) * 100;
      const rotation = Math.random() * 360;
      
      particle.style.setProperty('--x', `${x}px`);
      particle.style.setProperty('--y', `${y}px`);
      particle.style.setProperty('--rotation', `${rotation}deg`);
      particle.style.animationDelay = `${i * 0.1}s`;
      
      container.appendChild(particle);
      
      // Remover despu√©s de la animaci√≥n
      setTimeout(() => particle.remove(), 1000);
    }
  }

  // üé® Animar botones
  function animateButton(btn) {
    btn.classList.add('scale-125');
    setTimeout(() => btn.classList.remove('scale-125'), 100);
  }

  // ‚è±Ô∏è PROGRESO
  function startProgress() {
    const interval = setInterval(() => {
      if (!isPlaying) {
        clearInterval(interval);
        return;
      }
      if (audioElement instanceof HTMLAudioElement) {
        currentTime = audioElement.currentTime;
        duration = audioElement.duration || duration;
        if (currentTime >= duration) {
          isPlaying = false;
          const playIcon = document.getElementById("play-icon");
          const pauseIcon = document.getElementById("pause-icon");
          if (playIcon) playIcon.classList.remove("hidden");
          if (pauseIcon) pauseIcon.classList.add("hidden");
          clearInterval(interval);
        }
        updateProgress();
      }
    }, 100);
  }

  function updateProgress() {
    if (progressBar instanceof HTMLInputElement) {
      const progress = duration > 0 ? (currentTime / duration) * 100 : 0;
      progressBar.value = progress.toString();
    }
    updateTimeDisplay();
  }

  function seekAudio() {
    if (progressBar instanceof HTMLInputElement && audioElement instanceof HTMLAudioElement) {
      const value = Number(progressBar.value) || 0;
      const seekTime = (value / 100) * audioElement.duration;
      audioElement.currentTime = seekTime;
      currentTime = seekTime;
      updateTimeDisplay();
    }
  }

  function updateTimeDisplay() {
    const currentTimeEl = document.getElementById("currentTime");
    const totalDurationEl = document.getElementById("totalDuration");

    if (audioElement instanceof HTMLAudioElement) {
      if (currentTimeEl) {
        const minutes = Math.floor(audioElement.currentTime / 60);
        const seconds = Math.floor(audioElement.currentTime % 60);
        currentTimeEl.textContent = `${minutes}:${seconds.toString().padStart(2, "0")}`;
      }
      if (totalDurationEl && audioElement.duration) {
        const totalMinutes = Math.floor(audioElement.duration / 60);
        const totalSeconds = Math.floor(audioElement.duration % 60);
        totalDurationEl.textContent = `${totalMinutes}:${totalSeconds.toString().padStart(2, "0")}`;
      }
    }
  }
});
</script>